#include <iostream>
#include <cmath>
#include <iomanip>
#include <vector>
#include <algorithm>
double calcDen(std::vector<int> d, std::vector<int> a, double R, double EbN0, int lim){
	//On calcule le denominateur pour la proba. 
	//Il s'agit de la somme des (multiplicité*erfc)
	double result = 0;

	for (int i=0; i<lim; i++){
		//result += (a[i]*std::erfc(std::sqrt(d[i]*R*EbN0)));
		result += (a[i]*std::exp(-d[i]*R*EbN0));
	}
	return result;

}

double calcNom(std::vector<int> d, std::vector<int> a, std::vector<int> w, double R, double EbN0, int nbErr, int lim){
	//On calcule le nominateur pour la proba. 
	//Il s'agit de la somme des (multiplicité*erfc) pour les quelles w/a vaut le nombre d'erreur
	double result = 0.0;

	for (int i=0; i<lim; i++){
		if ((int)std::round((double)w[i]/(double)a[i])==nbErr){
			//result += (a[i]*std::erfc(std::sqrt(d[i]*R*EbN0)));
			result += (a[i]*std::exp(-d[i]*R*EbN0));
			//std::cout << d[i] << std::endl;
		}
	}

	return result;
}


double calcNomSymb(std::vector<int> d, std::vector<int> a, std::vector<int> ws, double R, double EbN0, int nbErr, int lim){
	//On calcule le nominateur pour la proba. 
	//Il s'agit de la somme des (multiplicité*erfc) pour les quelles w/a vaut le nombre d'erreur
	double result = 0.0;

	for (int i=0; i<lim; i++){
		if ((int)std::round((double)ws[i]/(double)a[i])==nbErr){
			//result += (a[i]*std::erfc(std::sqrt(d[i]*R*EbN0)));
			result += (a[i]*std::exp(-d[i]*R*EbN0));
			//std::cout << d[i] << std::endl;
		}
	}

	return result;
}

double calcBEFE(std::vector<int> d, std::vector<int> a, std::vector<int> w, double R, double EbN0, int lim){
	// sum(w*erfc)/sum(a*erfc)
	double nom = 0.0, den = 0.0;

	for (int i=0; i<lim; i++){
		den += (a[i]*std::erfc(std::sqrt(d[i]*R*EbN0)));
		nom += (w[i]*std::erfc(std::sqrt(d[i]*R*EbN0)));
	}

	return (nom/den);
}

double calcSEFE(std::vector<int> d, std::vector<int> a, std::vector<int> ws, double R, double EbN0, int lim){
	// sum(w*erfc)/sum(a*erfc)
	double nom = 0.0, den = 0.0;

	for (int i=0; i<lim; i++){
		den += (a[i]*std::erfc(std::sqrt(d[i]*R*EbN0)));
		nom += (ws[i]*std::erfc(std::sqrt(d[i]*R*EbN0)));
	}

	return (nom/den);
}

double calcFER(std::vector<int> d, std::vector<int> a, double R, double EbN0, int lim){
	
	double result = 0.0;
	for (int i=0; i<lim; i++){
		result += 0.5*(a[i]*std::erfc(std::sqrt(d[i]*R*EbN0)));
	}
	return result;
	
}

int main(int argc, char *argv[])
{

double K, invR, SNR;
std::vector<int> d, a, w, ws;
int idx = 0;

if(argc==2)
	idx = (int)std::strtol(argv[1], NULL, 10);

if (idx==0){
K=440.0; invR=2.0; SNR=2.4;
d = {  16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59};
a = { 110,    0,  220,    0,  440,  220,  770, 1962,  998, 2006, 1279,  942,  475,  379,  135,   32,  307,   31,  195,   12,  388,  207,  138,   54,   11,  238,  301,   19,  310,  306,  302,  123,   92,  253,  139,  243,  218,  346,  252,    7,   50,  318,  403,  479};
w = {1100,    0, 1870,    0, 3740, 1980, 5610,19616, 8881,17439,11145, 7182, 3530, 2679, 1458,  313, 1944,  278, 1348,   89, 2964, 1677,  858,  485,  107, 1739, 1738,  147, 2062, 2085, 2990, 1379,  864, 1712,  947, 1485, 1329, 2468, 1354,   84,  382, 2415, 3231, 3516};
ws ={770,    0, 1320,    0, 2750, 1540, 4510,13533, 6216,12215, 7718, 5120, 2721, 1935, 1015,  213, 1392,  201,  954,   63, 2205, 1254,  648,  294,   78, 1228, 1218,  106, 1454, 1445, 2098,  925,  566, 1228,  584, 1083,  892, 1721, 1050,   59,  265, 1649, 2487, 2462};
}else if (idx==1){
K=440.0, invR=3.0; SNR=2.0;
d = {   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59};
a = {  110,    0,  220,    0,    0,    0,  220,  110, 1209,  868,  329,  532, 1307, 1069,  976, 1025,  642,  653,  454,  231,  267,   34,  115,   14,   20,   83,   99,   84,  207,    6,   23,  109};
w = { 1100,    0, 1870,    0,    0,    0, 2200, 1210, 9889, 7690, 3181, 5926,10702, 9020, 8509, 8231, 6470, 5746, 4098, 1747, 2367,  284, 1349,   87,  170,  625,  647,  759, 1794,   57,  202, 1269};
ws ={  770,    0, 1320,    0,    0,    0, 1540,  880, 7472, 5636, 2523, 4099, 7855, 6548, 5884, 6276, 4263, 4154, 2512, 1170, 1661,  202,  905,   73,  125,  466,  463,  588, 1263,   41,  125,  845};
}else if (idx==2){
K=440.0, invR=4.0/3.0; SNR=4.0;
d = {    8,    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59};
a = {   27,  193,  600, 2319, 5490, 3348,  918,  756,  668,  627,  582,  673,  612,  771,  785,  813,  849,  851,  882,  791,  804,  665,  752,  624,  632,  641,  760,  767,  797,  693,  753,  758,  797,  738,  731,  769,  828,  834,  753,  755,  678,  749,  722,  587,  662,  714,  878, 1061, 1037,  985,  945,  957};
w = {  108,  810, 3439,13675,34710,20506, 5601, 4748, 4264, 4046, 3672, 4232, 3840, 4855, 5077, 5175, 5508, 5561, 5783, 4966, 4928, 4433, 4625, 3993, 4182, 4304, 4906, 4976, 4817, 4410, 4731, 4916, 5021, 4858, 4776, 4939, 5207, 5355, 4707, 4922, 4460, 4673, 4573, 3809, 4328, 4464, 5443, 6349, 6397, 6281, 6075, 5959};
ws ={  108,  741, 2939,11424,28458,16658, 4581, 3873, 3519, 3293, 2990, 3443, 3138, 3933, 4122, 4135, 4475, 4484, 4636, 4053, 4087, 3672, 3730, 3299, 3416, 3509, 3938, 4023, 3865, 3591, 3853, 4050, 4165, 4009, 3923, 4077, 4244, 4393, 3823, 4047, 3682, 3800, 3719, 3122, 3567, 3645, 4424, 5044, 5172, 5131, 4942, 4847};
}else if (idx==3){
K=440.0, invR=7.0/6.0; SNR=5.2;
d = {     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59};
a = {   10,   51,  615, 3376, 8394, 1915, 1382, 1429, 1266, 1406, 1416, 1419, 1448, 1317, 1361, 1504, 1474, 1513, 1666, 1632, 1722, 1601, 1632, 1652, 1888, 1805, 1904, 2053, 2015, 2121, 2224, 2199, 2289, 2499, 2548, 2329, 2499, 2694, 3049, 4434, 7937,16066,28052,40275,47005,42677,30303,16354, 7762, 3614, 2058, 1190,  804,  559,  426,  357};
w = {    40,  206, 2810,16954,47379,10556, 7800, 8037, 7274, 8193, 7964, 7960, 8046, 7520, 7864, 8425, 8541, 8517, 9422, 9322, 9698, 8937, 9149, 9231,10589,10243,10675,11415,11075,11686,12444,12402,12658,13919,14199,12839,14130,15138,16872,22250,37392,75264,136622,207111,256512,248558,190470,112343,59797,31947,20604,13047, 9607, 7084, 5586, 4852};
ws ={   40,  193, 2681,15833,43467, 9577, 7140, 7315, 6672, 7450, 7297, 7242, 7375, 6855, 7244, 7801, 7852, 7873, 8725, 8666, 8974, 8210, 8424, 8538, 9800, 9402, 9854,10523,10229,10825,11478,11489,11710,12946,13175,11952,13090,14036,15704,20904,35081,70306,126482,190475,234438,226481,173408,102582,54921,29630,19235,12273, 9055, 6717, 5312, 4602};
}else if (idx==4){
K=752.0, invR=2.0;SNR=2.0;
d = {   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59};
a = {  376,  376,    0,  752, 1128,  905, 1697, 3942, 3557, 2518, 2007, 2221,  192,  218,  245,    0,    4,  150,    9,    0,    0,  151,   66,  343,  182,  167,   10,  343,    2,  186,  360,  298,  312,   46,    5,  181,  300,    1,  571,  212,    6};
w = { 3384, 3008,    0, 6768,11280, 8228,14714,33248,30349,19832,15641,21038, 1726, 1756, 1748,    0,   37, 1200,   65,    0,    0,  909,  397, 2388, 1095, 1002,   80, 2401,   17, 1677, 2160, 2677, 2841,  414,   61, 1629, 2686,    6, 3432, 1948,   31};
ws ={ 2256, 2256,    0, 4512, 7520, 5548,10192,23266,20822,14700,10889,13942, 1298,  903, 1026,    0,   25,  900,   49,    0,    0,  755,  265, 1702,  730,  834,   59, 1717,   12, 1120, 1441, 1786, 1825,  320,   46, 1267, 1792,    5, 2289, 1357,   24};
}else if (idx==5){
K=752.0, invR=3.0;SNR=2.0;
d = {33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59};
a = {  376,    0,  376,  752,    0,    0,  752,  188,  381, 2557, 1465, 1676, 2052, 2268, 2677,  800,  176, 1819,  449,  417,  706,    7,   14,    2,    1,    8,    0};
w = { 3384,    0, 3760, 6392,    0,    0, 7520, 1316, 3434,24508,13154,16770,17718,21200,24119, 6237, 1746,16356, 3497, 3661, 3096,   56,   84,   15,    9,   78,    0};
ws ={ 2256,    0, 2632, 4512,    0,    0, 4888,  752, 2479,16999, 9315,12105,12505,14941,16656, 4345, 1224,11285, 2416, 2158, 2561,   40,   56,   13,    6,   50,    0};
}else if (idx==6){
K=752.0, invR=4.0/3.0;SNR=2.0;
d  = {  9,   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59};
a  = { 27,  148, 1462, 5088,11114,11434, 2411,  455,  496,  601,  621,  507,  571,  536,  711,  750, 1006, 1163, 1202, 1035,  939, 1080, 1062,  941,  989,  887,  734,  883,  650,  791,  827, 1093,  981, 1099, 1225, 1452, 1069,  892,  849,  851,  911,  952, 1004,  994, 1104,  993,  917,  908, 1037, 1026, 1315};
w  = {171, 1025, 9674,34032,75545,76442,15659, 2901, 3028, 3773, 3971, 3376, 3681, 3384, 4306, 4576, 6131, 7230, 7299, 6740, 6165, 6679, 6756, 5963, 6346, 5580, 4914, 5233, 4046, 4546, 4960, 6232, 5933, 6528, 7288, 8760, 6793, 5891, 5608, 5590, 5685, 6019, 6516, 6502, 6772, 6200, 5648, 5391, 6050, 6072, 7819};	
ws = {126,  716, 7449,26713,60008,60986,12306, 2223, 2361, 2977, 3125, 2666, 2846, 2593, 3287, 3507, 4673, 5515, 5570, 5157, 4761, 5142, 5298, 4684, 4916, 4389, 3820, 4119, 3251, 3690, 3965, 5143, 4756, 5263, 5840, 6996, 5421, 4736, 4465, 4456, 4558, 4816, 5125, 5114, 5359, 4957, 4542, 4334, 4822, 4768, 6102};	
}else if (idx==7){
K=752.0, invR=7.0/6.0; SNR=2.0;
d  = {  6,    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,   59};
a  = {199, 1542, 8737,23872, 4320, 1948, 1722, 1642, 1910, 1858, 1653, 1640, 1604, 1546, 1654, 1940, 2081, 2238, 2319, 2104, 2039, 2246, 2270, 2318, 2392, 2402, 2508, 2585, 2734, 2964, 3435, 3448, 3237, 3113, 3363, 3486, 3742, 3667, 3781, 4122, 4206, 4280, 4182, 3917, 4106, 4407, 4356, 4203, 4165, 3917, 3999, 4309, 4594, 5149};
w  = {826, 7197,48082,144563,24812,11673,10662, 9979,10846,10701, 9698, 9415, 8975, 8675, 9277,10901,11419,12389,13257,12236,12020,13085,13246,13382,13585,13944,14250,14604,15462,16404,18672,18971,18257,17954,19405,20184,22284,21724,22510,23976,23516,24159,23453,22957,23697,25464,24952,24348,24549,23201,23509,25082,26327,28899};
ws = {735, 6467,43018,127920,21611,10289, 9474, 8760, 9513, 9152, 8311, 8153, 7826, 7697, 8207, 9838,10363,11218,11929,11030,10838,11743,11786,12047,12149,12463,12690,13033,13823,14698,16883,17149,16487,15916,17294,17931,19677,19129,19853,21296,20920,21550,21058,20549,21168,22730,22268,21763,22010,20758,21065,22472,23688,26191};
}
int limit;
	if (argc==4){
		idx = (int)std::strtol(argv[1], NULL, 10);
		SNR = std::strtod(argv[2], NULL);
		limit =  std::min((int)std::stoi(argv[3], nullptr, 0), (int)d.size());		
	}
	else{
		std::cout << "argc= " << argc << std::endl; 
		std::cout << "You can choose the SNR value and the number of elements in spectrum \n \
				 (idx, SNR, size) are the default values\n\n";
		limit = d.size();
	}
		
	double R    = (2*K)/(2*K*invR);
	double EbN0 = pow(10.0,SNR/10.0);

	if ( (d.size() != a.size()) || (w.size() != a.size()) || (d.size() != w.size()) ){
		std::cout << "Size of d or A or W are different: d: " << d.size() <<" A: "<< a.size() << " w: " << w.size() <<std::endl;
		exit(0);
	}

	std::cout << "Distribution of errors calculation. "<< std::endl;
	std::cout << "K: " << K << ", SNR: " << SNR <<", Spectrum size: " << limit  << ", R(calc): " << R << std::endl << std::endl;

	double nom, den, nom_s;

	den = calcDen(d, a, R, EbN0, limit); 

	for (int i=1; i<=20; i++){
		std::cout << "Probabilty CW with " << i << " err:\t";
		nom   = calcNom(d, a, w, R, EbN0, i, limit);
		nom_s = calcNomSymb(d, a, ws, R, EbN0, i, limit);
 		//std::cout << (int)std::round(nom/den*100) << " %\n";
		std::cout << nom/den*100.0 << " %"  << "\t\t" << nom_s/den*100.0 << " %\n";
	}

	double BEFE = calcBEFE(d,a,w,R,EbN0, limit);
	std::cout << "\nBE/FE expected:\t" << BEFE << "\n";

	double SEFE = calcSEFE(d,a,ws,R,EbN0, limit);
	std::cout << "SE/FE expected:\t" << SEFE << "\n";
	
	double FER = calcFER(d,a,R,EbN0, limit);
	std::cout << "FER expected:\t" << FER << "\n\n";

	std::vector<int> avgW;
	for (int i=0; i<limit; i++)
		avgW.push_back((int)std::round((double)w[i]/(double)a[i]));
	std::cout << "Maximum weight: " << avgW[std::distance(avgW.begin(),std::max_element(avgW.begin(), avgW.end()))] << std::endl << std::endl;

	return 0;

}


